// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seeds    = ["./seed/index.ts"] // Specify the path to your seed file here
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Create Workout Plan, w/ columns for name, description, and a collection of WorkoutPlanSetSchedules
model WorkoutPlan {
  id          Int                      @id @default(autoincrement())
  name        String                   @db.VarChar(255)
  description String?                  @db.Text
  startDate   DateTime                 @default(now())
  schedule    WorkoutPlanSetSchedule[] @relation("WorkoutPlanToSchedule")
  userId      Int
  user        User                     @relation(fields: [userId], references: [id])
}

// Create workoutPlanSetSchedules, with columns for days_of_week (Array of Ints), and a workoutSetId
model WorkoutPlanSetSchedule {
  id                  Int                  @id @default(autoincrement())
  daysOfWeek          Int[]
  workoutSet          WorkoutSet           @relation(fields: [workoutSetId], references: [id], name: "WorkoutPlanToSchedule")
  workoutPlan         WorkoutPlan?         @relation(fields: [workoutPlanId], references: [id], name: "WorkoutPlanToSchedule")
  workoutSetInstances WorkoutSetInstance[] @relation("WorkoutPlanSetScheduleToInstance")
  notes               String?              @db.Text
  workoutPlanId       Int?
  workoutSetId        Int
}

// A collection of Individual Workouts
// For example, name = "Abs Workout", and items = [Crunches, Leg Raises, Planks]
model WorkoutSet {
  id          Int                      @id @default(autoincrement())
  name        String                   @db.VarChar(255)
  description String?                  @db.Text
  items       WorkoutSetItem[]         @relation("WorkoutSetToItems")
  schedules   WorkoutPlanSetSchedule[] @relation("WorkoutPlanToSchedule")
}

// A single workout item, like "Crunches" or "Leg Raises"
// For example, order = 1, workoutSetId = 1, listWorkoutId = 1
// ListWorkoutId refers to the master list of workouts
model WorkoutSetItem {
  id              Int          @id @default(autoincrement())
  workoutSetId    Int
  order           Int
  listWorkoutId   Int
  workoutSet      WorkoutSet   @relation("WorkoutSetToItems", fields: [workoutSetId], references: [id])
  workoutListItem ListWorkouts @relation(fields: [listWorkoutId], references: [id])
}

model WorkoutSetInstance {
  id                       Int                      @id @default(autoincrement())
  scheduledDate            DateTime
  actualDate               DateTime?
  description              String?                  @db.Text
  status                   Status                   @default(SCHEDULED)
  workoutPlanSetSchedule   WorkoutPlanSetSchedule   @relation(fields: [workoutPlanSetScheduleId], references: [id], name: "WorkoutPlanSetScheduleToInstance")
  workoutSetItemInstances  WorkoutSetItemInstance[] @relation("WorkoutSetInstanceToItemInstance")
  workoutPlanSetScheduleId Int
  userId                   Int
  user                     User                     @relation(fields: [userId], references: [id])
}

model ListWorkouts {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(255)
  targetArea             TargetArea
  WorkoutSetItem         WorkoutSetItem[]
  WorkoutSetItemInstance WorkoutSetItemInstance[]
}

enum TargetArea {
  Chest
  Abs
  Shoulders
  Back
  Biceps
  Triceps
  Cardio
  Legs
}

model WorkoutSetItemInstance {
  id                   Int                @id @default(autoincrement())
  workoutSetInstanceId Int
  status               Status             @default(NOT_STARTED)
  order                Int
  listWorkoutId        Int
  workoutSetInstance   WorkoutSetInstance @relation(fields: [workoutSetInstanceId], references: [id], name: "WorkoutSetInstanceToItemInstance")
  workoutListItem      ListWorkouts       @relation(fields: [listWorkoutId], references: [id])
  reps                 Rep[]
}

model Rep {
  id                       Int                    @id @default(autoincrement())
  workoutSetItemInstanceId Int
  repNumber                Int
  count                    Int?
  weight                   Float?
  weightUnit               WeightUnit?            @default(lbs)
  distance                 Float?
  distanceUnit             DistanceUnit?          @default(mi)
  time                     Float?
  timeUnit                 TimeUnit?              @default(min)
  notes                    String?                @db.Text
  workoutSetItemInstance   WorkoutSetItemInstance @relation(fields: [workoutSetItemInstanceId], references: [id])
}

enum TimeUnit {
  min
  sec
}

enum DistanceUnit {
  mi
  km
}

enum WeightUnit {
  lbs
  kg
}

enum Status {
  SCHEDULED
  COMPLETED
  NOT_STARTED
}

model User {
  id                 Int                  @id @default(autoincrement())
  sourceName         String               @db.VarChar(255)
  sourceId           String               @db.VarChar(255)
  firstName          String               @db.VarChar(255)
  lastName           String               @db.VarChar(255)
  email              String               @db.VarChar(255)
  WorkoutPlan        WorkoutPlan[]
  WorkoutSetInstance WorkoutSetInstance[]
}
